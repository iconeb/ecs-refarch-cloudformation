Description: >
    This template deploys an ECS cluster to the provided VPC and subnets 
    using an Auto Scaling Group

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Network Configuration"
        Parameters: 
          - VPC
          - Subnets
          - SecurityGroups
      - Label: 
          default: "Amazon EC2 Configuration"
        Parameters:
          - EnvironmentName 
          - InstanceType
          - ClusterMaxSize
          - ClusterSize
          - KeyName
      - Label:
          default: "Docker Host Configuration"
        Parameters:
          - DockerProxy
          - DockerNoProxy
      - Label:
          default: "Specify EFS related parameters"
        Parameters:
          - EFSExisting
          - EFSMount
      - Label:
          default: "Specify Instance parameters"
        Parameters:
          - SysctlFile
          - SysctlSource
         
Parameters:

    # Parameters for ECS: Name, Type, Size 
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    InstanceType: 
        Description: Which instance type should we use to build the ECS cluster?
        Type: String
        Default: m4.large

    ClusterSize:
        Description: How many ECS hosts do you want to deploy at startup?
        Type: Number
        Default: 2

    ClusterMaxSize:
        Description: How many ECS hosts do you want to deploy as a maximum?
        Type: Number
        Default: 4        
        
    KeyName:
        Description: Access ECS hosts with existing key
        Type: AWS::EC2::KeyPair::KeyName

    # Network parameters: VPC, subnets and security groups
    VPC:
        Description: Choose which VPC this ECS cluster should be deployed to
        Type: AWS::EC2::VPC::Id

    Subnets:
        Description: Choose which subnets this ECS cluster should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    SecurityGroups:
        Description: Select the Security Group to use for the ECS cluster hosts
        Type: List<AWS::EC2::SecurityGroup::Id>

    # EFS Parameters: mount point and host; if empty new EFS will be created
    EFSExisting:
        Description: "EFS drive to store client content. If left empty a new drive will be created automatically."
        Type: "String"
        Default: ""

    EFSMount:
        Description: Select EFS mountpoint (path will be created)
        Type: String

    # Docker specific parameters regarding proxy
    DockerProxy:
        Description: Set Docker proxy for environment in form http://server:port
        Type: String
        Default: http://proxy-aws.xxxx.xxxxx:8080/
        
    DockerNoProxy:
        Description: Set Docker proxy exceptions in comma separated string
        Type: String
        Default: 169.254.169.254,s3.eu-central-1.amazonaws.com,s3-eu-central-1.amazonaws.com,*.s3.eu-central-1.amazonaws.com,*.s3-eu-central-1.amazonaws.com,risorse.enel,*.risorse.enel,enelint.global,*.enelint.global,10.*,172.*

    # Other AMI parameters
    SysctlFile:
        Description: Specify target sysctl file
        Type: String
        Default: 90-enel.conf
        
    SysctlSource:
        Description: Specify URL where to retrieve list of kernel tuning parameters (sysctl)
        Type: String
        
Mappings:

    # These are the latest ECS optimized AMIs as of February 2017:
    #
    #   amzn-ami-2017.09.g-amazon-ecs-optimized
    #   ECS agent:    1.16.2
    #   Docker:       17.09.1-ce
    #   ecs-init:     1.16.2-1
    #
    # You can find the latest available on this page of our documentation:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    # (note the AMI identifier is region specific) 

    AWSRegionToAMI:
        us-east-2:
            AMI: ami-ce1c36ab
        us-east-1:
            AMI: ami-28456852
        us-west-2:
            AMI: ami-decc7fa6
        us-west-1:
            AMI: ami-74262414
        eu-west-3:
            AMI: ami-9aef59e7
        eu-west-2:
            AMI: ami-67cbd003
        eu-west-1:
            AMI: ami-1d46df64
        eu-central-1:
            AMI: ami-509a053f
        ap-northeast-2:
            AMI: ami-c212b2ac
        ap-northeast-1:
            AMI: ami-872c4ae1
        ap-southeast-2:
            AMI: ami-58bb443a
        ap-southeast-1:
            AMI: ami-910d72ed
        ca-central-1:
            AMI: ami-435bde27

Conditions:
    CreateEFS: !Equals [ !Ref EFSExisting, '' ]
    PutSysctl: !Equals [ !Ref SysctlSource, '' ]

Resources:

    EFSMountTargetSecurityGroup:
        Condition: CreateEFS
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId: !Ref VPC
            GroupDescription: Security group for mount target
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: '2049'
              ToPort: '2049'
              CidrIp: 0.0.0.0/0

    EFSFileSystem:
        Condition: CreateEFS
        Type: AWS::EFS::FileSystem
        Properties:
            PerformanceMode: generalPurpose

    EFSMountTarget:
        Condition: CreateEFS
        Type: AWS::EFS::MountTarget
        Properties:
            FileSystemId: !Ref EFSFileSystem
            SubnetId: !Select [ 0, !Ref Subnets ]
            SecurityGroups:
                - !Ref EFSMountTargetSecurityGroup

    ECSCluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Ref EnvironmentName

    ECSAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties: 
            VPCZoneIdentifier: !Ref Subnets
            LaunchConfigurationName: !Ref ECSLaunchConfiguration
            MinSize: 1
            MaxSize: !Ref ClusterMaxSize
            DesiredCapacity: !Ref ClusterSize
            Tags: 
                - Key: Name
                  Value: !Sub ${EnvironmentName} ECS host
                  PropagateAtLaunch: true
        CreationPolicy:
            ResourceSignal: 
                Timeout: PT15M
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MinInstancesInService: 1
                MaxBatchSize: 1
                PauseTime: PT15M
                SuspendProcesses:
                  - HealthCheck
                  - ReplaceUnhealthy
                  - AZRebalance
                  - AlarmNotification
                  - ScheduledActions
                WaitOnResourceSignals: true
        
    ECSLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId:  !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
            InstanceType: !Ref InstanceType
            SecurityGroups: !Ref SecurityGroups
            IamInstanceProfile: !Ref ECSInstanceProfile
            KeyName: !Ref KeyName
            UserData: 
                "Fn::Base64": !Sub |
                    #!/bin/bash
                    echo "http_proxy=${DockerProxy}" >> /etc/yum.conf
                    #DNS ip address is second IP after network address
                    #dnsip=$(ip -o -4 a s eth0 | awk '{print $4}' | xargs ipcalc -n | awk -F'=' '{print $2}' | awk -F'.' '{ printf "%d.%d.%d.%d", $1, $2, $3, $4+2 }')
                    yum -y install dnsmasq && \
                    chkconfig dnsmasq on && \
                    echo "server=/efs.eu-central-1.amazonaws.com/169.254.169.253" > /etc/dnsmasq.d/efs.conf && \
                    sed -i '0,/^nameserver/s//nameserver 127.0.0.1\nnameserver/' /etc/resolv.conf && \
                    service dnsmasq start
                    yum install -y aws-cfn-bootstrap
                    /opt/aws/bin/cfn-init -v -c configDefault --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
                    /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup
        Metadata:
            AWS::CloudFormation::Init:
                configSets:
                    configDefault:
                        - "configDefault"
                    configSysctl:
                        - "configSysctl"
                configSysctl:
                    files:
                        "/etc/sysctl.d/${SysctlFile}":
                            mode: 000644
                            owner: root
                            group: root
                            source: ${SysctlSource}                
                configDefault:
                    packages:
                        yum:
                            nfs-utils: []
                    commands:
                        01_add_instance_to_cluster:
                            command: !Sub echo "ECS_CLUSTER=${ECSCluster}" >> /etc/ecs/ecs.config
                        02_set_docker_proxy:
                            command: !Sub |
                                echo "#Set proxy
                                export HTTP_PROXY=${DockerProxy}
                                export HTTPS_PROXY=${DockerProxy}
                                export NO_PROXY=${DockerNoProxy}
                                " | tee -a /etc/sysconfig/docker   
                        03_set_default_ecs_region:
                             command: !Sub echo "AWS_DEFAULT_REGION=${AWS::Region}" >> /etc/ecs/ecs.config
                        04_set_efs_mountpoint:
                            command: !Sub 
                                - |+
                                  mkdir -p /${EFSMount}
                                  echo "${EFSHost}.efs.${AWS::Region}.amazonaws.com:/ /${EFSMount} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0" >> /etc/fstab
                                  mount /${EFSMount}
                                - EFSHost:
                                    Fn::If:
                                      - CreateEFS
                                      - !Ref EFSFileSystem
                                      - !Ref EFSExisting
                        05_set_sysctl:
                            command: !Sub sysctl -p
                    files:                                
                        "/etc/cfn/cfn-hup.conf":
                            mode: 000400
                            owner: root
                            group: root
                            content: !Sub |
                                [main]
                                stack=${AWS::StackId}
                                region=${AWS::Region}
                        
                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                            content: !Sub |
                                [cfn-auto-reloader-hook]
                                triggers=post.update
                                path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration

                    services: 
                        sysvinit:
                            cfn-hup: 
                                enabled: true
                                ensureRunning: true
                                files: 
                                    - /etc/cfn/cfn-hup.conf
                                    - /etc/cfn/hooks.d/cfn-auto-reloader.conf

    # This IAM Role is attached to all of the ECS hosts. It is based on the default role
    # published here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
    #
    # You can add other IAM policy statements here to allow access from your ECS hosts
    # to other AWS services. Please note that this role will be used by ALL containers
    # running on the ECS host.

    ECSRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${EnvironmentName}-ECSRole-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": "ec2.amazonaws.com" 
                        }
                    }]
                }
            Policies: 
                - PolicyName: ecs-service
                  PolicyDocument: |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "ecs:CreateCluster",
                                "ecs:DeregisterContainerInstance",
                                "ecs:DiscoverPollEndpoint",
                                "ecs:Poll",
                                "ecs:RegisterContainerInstance",
                                "ecs:StartTelemetrySession",
                                "ecs:Submit*",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:BatchGetImage",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:GetAuthorizationToken"
                            ],
                            "Resource": "*"
                        }]
                    }

    ECSInstanceProfile: 
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles: 
                - !Ref ECSRole

Outputs:

    Cluster:
        Description: A reference to the ECS cluster
        Value: !Ref ECSCluster

